__author__ = 'bkurniawan'from datetime import datetimeimport osimport operatorimport mathfrom random import random, randintfrom pathlib import Pathimport rlfrom ace_zero_core.agents.agent import Agentfrom ace_zero_core import fighter
MIN_IDEAL_DISTANCE = 152
MAX_IDEAL_DISTANCE = 914blue_default_initial = {    "callsign": "viper",    "id": 0,    "side": 1,    "metric": "SI",    "x": 0.0, "y": 0.0, "z": 0.0,    "psi": 0.0,    "theta": 0.0,    "phi": 0.0,    "v": 125.0,    "weight": 100.0,    "fuel": 100.0,    "v_min": 100, "v_max": 1000, "v_K": 0.1,    "theta_K": 0.005,    "psi_K": 10.0}red_default_initial = {    "callsign": "cobra",    "id": 1,    "side": 2,    "metric": "SI",    "x": 500.0, "y": 0.0, "z": 0.0,    "psi": 0.0,    "theta": 0.0,    "phi": 0.0,    "v": 125.0,    "weight": 100.0,    "fuel": 100.0,    "v_min": 100, "v_max": 1000, "v_K": 0.1,    "theta_K": 0.005,    "psi_K": 10.0}def get_zone_and_speed(state):    index = state.index('-')    zone = int(state[:index])    speed = int(state[index+1:])    return zone, speed
def get_zone(state):    zone, speed = get_zone_and_speed(state)    return zone
def get_zone_speed_degree(state):    index = state.index('-')    zone = int(state[:index])    speed_degree = state[index+1:]    index = speed_degree.index('-')    speed = int(speed_degree[:index])    degree = int(speed_degree[index+1])    return zone, speed, degreedef get_R_ata_aa_from_state(state):#     index = state.index('|')#     R = int(state[:index])#     temp = state[index+1:]#     index = temp.index('|')#     ata = int(temp[:index])#     temp = state[index+1:]#     index = temp.index('|')#     aa = int(temp[:index])    tokens = state.split('|')    R = int(tokens[0])    ata = int(tokens[1])    aa = int(tokens[2])    dv = None    if len(tokens) > 3:        dv = int(tokens[3])    return R, ata, aa, dv
def get_R_ata_aa_from_entities(entity_state, threat_state):    dx = threat_state.x - entity_state.x    dy = threat_state.y - entity_state.y    R = math.sqrt(dx * dx + dy * dy)    R = int(R / 20)    ata = int(round(entity_state.contact_ata, -1))    aa = int(round(entity_state.contact_aa, -1))    return R, ata, aa#     #     return get_R_ata_aa(entity_state.x, entity_state.y, entity_state.psi, #                         threat_state.x, threat_state.y, threat_state.psi)# def get_R_ata_aa(blueX, blueY, bluePsi, redX, redY, redPsi):#     dx = redX - blueX#     dy = redY - blueY#     R = math.sqrt(dx * dx + dy * dy)#     atan = math.atan2(dy, dx) * 180 / math.pi#     ata = bluePsi - atan#     if ata > 180:#         ata -= 360#     aa = redPsi - atan#     if aa > 180:#         aa -= 360#     R = int(int(R) / 20)#     ata = 10 * int(int(ata) / 10)#     aa = 10 * int(int(aa) / 10)#     return R, ata, aa
def print_q(q, file):    file.write("Q snapshot at " + str(datetime.now()) + "\n\n")    for key in sorted(q.keys()):        file.write(key + ":" + str(q[key]) + "\n")    for i in range(-300, 300):        temp= {}        for j in range(10):            key = str(i) + "-" + str(j)            if key in q:                temp[key] = q[key]        if (len(temp) > 0):            sorted_temp = sorted(list(temp.items()), key=operator.itemgetter(1), reverse=True)            for key_value in sorted_temp:                print(str(key_value) + "\n")                file.write(str(key_value) + "\n")            file.write("\n")def config_fighter(sim, config_file, context):    import json    if not hasattr(context, 'config'):        if not os.path.exists(config_file):            raise SystemExit("Script action file '{}' does not exist".                format(config_file))        try:            with open(config_file) as instream:                context.config = json.load(instream)        except IOError as e:            raise SystemExit("Error opening scenario file '{}'\n{}".                format(config_file, str(e)))            config = context.config    if 'dt' in config:        sim.dt = config['dt']        print('user-defined dt:', sim.dt)    if 'max_ticks' in config:        sim.umpire.termination_triggers[0].max_time_elapsed = sim.dt * config['max_ticks']        print('user-defined max_time:', sim.umpire.termination_triggers[0].max_time_elapsed)    if 'blue' in config:        blue = config['blue']        if 'dyn_initials' in blue:            for dyn_initial in blue['dyn_initials']:                if context.episode == dyn_initial['episode']:                    context.blue_initial.update(dyn_initial['initial'])        initial = {**context.blue_initial}        if 'initial' in blue:            initial.update(blue['initial'])        agent_params = blue['agent_params'] if 'agent_params' in blue else {}        sim.viper = sim.get_fighter(initial, blue['agent_class'], agent_params)            if 'red' in config:        red = config['red']        initial = {**context.red_initial}        #if 'initial' in red:        #    initial.update(red['initial'])        agent_params = red['agent_params'] if 'agent_params' in red else {}        sim.cobra = sim.get_fighter(initial, red['agent_class'], agent_params)# def get_q_values_from_db(connection, cursor, state):#     query = "SELECT state, action, agent_id, counter, value FROM q WHERE state = '" + state + "'"#     cursor.execute(query)#     return cursor.fetchall()def get_q_value_from_db(cursor, state, action):    query = "SELECT counter, value FROM q WHERE state = '" + state + "' AND action = '" + str(action) + "'"    cursor.execute(query)    results = cursor.fetchall()    total_count = 0    avg_weighted_value = 0.0    for i in range(len(results)):        counter, value = results[i][0], results[i][1]        total_count += counter        avg_weighted_value += counter * value    return 0 if total_count == 0 else avg_weighted_value / total_countdef update_q_value_in_db(connection, cursor, state, action, agent_id, value):    query = "UPDATE q SET value=" + str(value) + ", counter = counter + 1 WHERE state='" + state + "' AND action=" + str(action) + ' AND agent_id = ' + str(agent_id)    cursor.execute(query)    connection.commit()    def get_action_with_max_value_in_db(cursor, state):    query = "SELECT DISTINCT(action) FROM q WHERE state = '" + state + "' AND value IN (SELECT DISTINCT MAX(value) FROM q WHERE state='" + state + "')";    cursor.execute(query)    actions = cursor.fetchall()    if len(actions) == 1:        return actions[0][0]    else:        return actions[randint(0, len(actions) - 1)][0]def create_dir_if_not_exists(path):    if not os.path.exists(path):        os.mkdir(path)def get_time_delta(start_time):    end_time = datetime.now()    return (end_time - start_time)testing = False#dt = 0.5scenario = ''MIN_NUM_IN_GOAL = 50num_trials = 10max_ticks = 50000dbname = 'acezero'dbhost = 'localhost'dbuser = 'root'dbpassword = 'password'total_ticks = 0