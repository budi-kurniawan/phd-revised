__author__ = 'bkurniawan'import mathfrom .. import rl_utilsfrom rl.agent.et_2d1 import EligibilityTraces2D1Agent
class EligibilityTraces2D2Agent(EligibilityTraces2D1Agent):    ### An agent implementing eligibility traces and Q-learning    def __init__(self, params_filename=None):        super(EligibilityTraces2D2Agent, self).__init__()
    #actions = ['no_command', 'set_heading(10)', 'set_heading(-10)', 'change_speed_by_percentage(-10)', 'change_speed_by_percentage(10)']    actions = ['no_command', 'set_heading(10)', 'set_heading(-10)', 'set_heading(20)', 'set_heading(-20)']        def get_state(self, entity_state, threat_state):        R, ata, aa, dv = rl_utils.get_R_ata_aa_from_entities(entity_state, threat_state)        aa = '0' # aa is not used        if R > 131:            R = 131        return str(R) + "|" + str(ata) + "|" + str(aa)#     def get_reward(self, state):#         return 1 if self.consecutive_in_goal >= rl_utils.MIN_NUM_IN_GOAL and self.is_in_goal(state) else 0    def get_reward(self, state):        return 1 if self.consecutive_in_goal >= rl_utils.MIN_NUM_IN_GOAL and self.is_in_goal(state) else 0#         R, ata, aa = rl_utils.get_R_ata_aa_from_state(state)#         if math.fabs(ata) <= 20:#             if R >= 9 and R <= 46:#                 return 1#             else:#                 return 0.1#         return 0        def is_in_goal(self, state):        R, ata, aa, dv = rl_utils.get_R_ata_aa_from_state(state)        return R >= 9 and R <= 46 and math.fabs(ata) <= 30