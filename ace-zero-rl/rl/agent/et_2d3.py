__author__ = 'bkurniawan'import mathfrom .. import rl_utilsfrom rl.agent.et_2d1 import EligibilityTraces2D1Agent
class EligibilityTraces2D3Agent(EligibilityTraces2D1Agent):    ### An agent implementing eligibility traces and Q-learning    def __init__(self, params_filename=None):        super(EligibilityTraces2D3Agent, self).__init__()
    actions = ['no_command', 'set_heading(10)', 'set_heading(-10)', 'change_speed_by_percentage(-10)', 'change_speed_by_percentage(10)']        def get_state(self, entity_state, threat_state):        # 1,684,800 possible states (130 * 36 * 36 * 10)        R, ata, aa = rl_utils.get_R_ata_aa_from_entities(entity_state, threat_state)        dv = int(round(threat_state.v - entity_state.v, -1)) # round to nearest 10        if dv > 100:            dv = 100        if dv < -100:            dv = -100        R = 131 if R > 131 else R        return str(R) + "|" + str(ata) + "|" + str(aa) + "|" + str(dv)    def get_reward(self, state):        r = 1 if self.consecutive_in_goal >= rl_utils.MIN_NUM_IN_GOAL and self.is_in_goal(state) else 0        rl_utils.context.total_reward += r        return r#         R, ata, aa = rl_utils.get_R_ata_aa_from_state(state)#         if math.fabs(ata) <= 20:#             if R >= 9 and R <= 46:#                 return 1#             else:#                 return 0.1#         return 0        def is_in_goal(self, state):        R, ata, aa, dd = rl_utils.get_R_ata_aa_from_state(state)        return R >= 9 and R <= 46 and math.fabs(ata) <= 30