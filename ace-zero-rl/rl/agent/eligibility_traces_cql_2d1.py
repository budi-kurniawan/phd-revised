__author__ = 'bkurniawan'from rl.agent.eligibility_traces_cql1 import EligibilityTracesCQL1Agentfrom rl.agent.eligibility_traces import EligibilityTracesAgentfrom rl import rl_utilsimport math
""" no terminal states """class EligibilityTracesCQL2D1Agent(EligibilityTracesCQL1Agent):    """ A modified coarse Q-learning agent """    def __init__(self, params_filename=None):        super(EligibilityTracesCQL2D1Agent, self).__init__()    actions = ['no_command', 'set_heading(10)', 'set_heading(-10)']
    def calculate_t(self, reward):        self.t += reward * EligibilityTracesAgent.GAMMA * EligibilityTracesAgent.LAMBDA
    def is_terminal(self, state):        return False
    def is_in_goal(self, state):        R, ata, aa = rl_utils.get_R_ata_aa_from_state(state)        return R >= 9 and R <= 46 and math.fabs(aa) <= 60 and math.fabs(ata) <= 30
    def get_state(self, entity_state, threat_state):        # goldilock is 9 <= i <= 46        # common_attributes = ['x','y','z','psi','psi_c','theta','theta_c','phi','v','v_c']        # use psi to get heading degree, psi_c to pass t        # SetHeadingGLoadCmd(psi_c=threat_bearing, gload_c=5)        R, ata, aa = rl_utils.get_R_ata_aa_from_entities(entity_state, threat_state)        if R > 131:            R = 131        return str(R) + "|" + str(ata) + "|" + str(aa)
    def get_reward(self, state):        return 1 if self.consecutive_in_goal >= rl_utils.MIN_NUM_IN_GOAL and self.is_in_goal(state) else 0    def log(self, t, reward, prev_state_action, q, e):        # The log file is in q_snapshots/        if t > 0:            return        entity_state = self.beliefs.entity_state        threat_state = self.beliefs.threat_state        R, ata, aa = rl_utils.get_R_ata_aa_from_entities(entity_state, threat_state)#         self.log_file.write(str.format("t:{0}, reward:{1}, prev sa:{2}\n", t, reward, prev_state_action))#         self.log_file.write(str.format("blue.x:{0}, blue.y:{1}, red.x:{2}, red.y:{3}\n", entity_state.x, entity_state.y, threat_state.x, threat_state.y))#         self.log_file.write(str.format("R:{0}, blue.psi:{1}, red.psi:{2}, ata: {3}, aa:{4}\n", R, entity_state.psi, threat_state.psi, ata, aa))#         self.log_file.write("q:" + str(q) + "\n")#         self.log_file.write("e:" + str(e) + "\n\n")