import mathfrom random import random, randintfrom .. import rl_utilsfrom rl.agent.et_2d1 import EligibilityTraces2D1Agent#from rl.agent.eligibility_traces import EligibilityTracesAgent
class EligibilityTraces2D1NoRandomAgent(EligibilityTraces2D1Agent):    def __init__(self, params_filename=None):        super(EligibilityTraces2D1NoRandomAgent, self).__init__()        self.index1 = 0        self.index2 = 0        self.index3 = 0        self.random_epsilon = [0.0, 0.2, 0.4, 0.6, 0.8]
    def get_explore_exploit_action(self, epsilon, q, state):        temp = self.index2        self.index2 += 1        if self.index2 >= len(self.random_epsilon):            self.index2 = 0        if rl_utils.context.episode == 1:            print('random epsilon index:', temp, ' at t:', rl_utils.context.t)        if self.random_epsilon[temp] < epsilon:            return self.get_random_action(), True        else:            return self.get_action_with_max_q_value(q, state), False         def get_random_action(self):        temp = self.index1        self.index1 += 1        if self.index1 >= len(self.actions):            self.index1 = 0        if rl_utils.context.episode == 1:            print('random action:', temp, ' at t:', rl_utils.context.t)        return temp    def get_random_action_index(self, min_inc, max_inc):        if self.index3 > max_inc:            self.index3 = 0        temp = self.index3        self.index3 += 1        if rl_utils.context.episode == 1:            print('==== random action index:', temp, ' at t:', rl_utils.context.t)        return temp        return randint(min_inc, max_inc)